# Simulation description
trial_descript: Training of 1D Chebyshev polynomial-based model
# If trial_name == 'None', then name to the experiment is given automatically,
# otherwise it is set name set by user 
# trial_name: start_from_m7_7_1_max_step_7_step_num_2_cond_step_head
trial_name: start_from_m7_7_1_max_step_7_step_num_2_noncond_step_head
# trial_name: start_from_m7_7_1_max_step_7_step_num_2

# trial_name: sgd_full_grad_adam_10k_epochs_4_pow_dim_mu_1e_3_stand_tx
# trial_name: test
# Simulation parameters
# Chebyshev polynomal order
param_num: [6, 6]
# Number of OLS iterations. Each new iteration corresponds to 1 new model branch.
iter_num: 10
batch_size: 1
# Whole signal length 213504, half 106752
block_size: 106752 # 13344
# chunk_num is important parameter, which allows to divide whole signal
# into chunk_num blocks. LS method is implemented to accumulate 
# hessian and gradient along the whole signal length and save GPU memory.
# Increase this parameter if you obtain out of memory error.
chunk_num: 1
dtype: complex128
device: "cuda:1"
# dtype: complex64
# Path to the folder with data
data_path: '../../data/data2d.mat'
# Channel to compensate: A or B
channel: B
# Allow to overwrite folder with saved results or not
overwrite_file: True

# Parameters of environment
brunch_number: 1 # delays_number = brunch_number * 3 for 2D model
delays_range: [-7, 7] # Range of delays search
max_delay_step: 7 # Max step value per single agent move
delays2change_num: 1 # Maximum number of delays to change per single agent move
max_steps: 100000 # Maximum number of PPO steps
# Normalization of state and reward parameters
state_alpha: 0.0
reward_alpha: 0.0
# Initial delays
start_mode: same
init_delays: [[-7, 7, 1]]

# Parameters of MLP agent
hidden_delay_ind_size: 256
hidden_delay_ind_num: 2
hidden_delay_step_size: 256
hidden_delay_step_num: 2
stepid_embed_size: 4
ind_choice_embed_size: 8
hidden_shared_size: 256
hidden_shared_num: 2
# General training parameters
num_runner_steps: 2 # Steps in trajectory
# 'discount' - disount with gamma or 'terminal' - terminal return
accum_return_mode: 'terminal'
gamma: 0.9 # discount
# gamma: 0.8 # discount
num_minibatches: 1 # Number of mini-batches to divide whole trajectory into
total_epoch_num: 200 # Total number of epochs
lr: 0.0003 # Adam learning rate
eps: 0.00000001 # Adam epsilon

# Policy Gradient training parameters
explore_loss_coef: 0.0 # weight of explore loss
max_grad_norm: 1000 # Maximum grad norm for clipping